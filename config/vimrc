set nocompatible

" bundle setting 
au GUIEnter * call libcallnr("vimtweak.dll", "SetAlpha", 234)

filetype off                  " required!

set completeopt-=preview

" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" aptitude install vim-gui-common
"
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My bundles here:
" original repos on GitHub
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'
Bundle 'octol/vim-cpp-enhanced-highlight'
Bundle 'syui/w-auto.vim'
Bundle 'tpope/vim-commentary'
Bundle 'honza/vim-snippets'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'fsouza/go.vim'
Bundle 'jiangmiao/auto-pairs'

Bundle 'scrooloose/syntastic'
let g:ycm_show_diagnostics_ui = 0
let g:syntastic_check_on_open = 1
let g:syntastic_cpp_checkers = ['clang++']
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

Bundle 'Valloric/YouCompleteMe'
" cd ~/.vim/bundle/YouCompleteMe && ./install.py --clang-completer

" vim-scripts repos
Bundle 'SQLComplete.vim'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'STL-Syntax'
Bundle 'a.vim'
" Bundle 'c.vim'
Bundle 'ctags.vim'
Bundle 'taglist.vim'
"Bundle 'SirVer/ultisnips'
"Bundle 'python.vim'
" python代码检查工具
Bundle 'pylint.vim'
"Bundle 'ftplugin/sql.vim'
Bundle 'surround.vim'
" non-GitHub repos
Bundle 'git://git.wincent.com/command-t.git'
" Git repos on your local machine (i.e. when working on your own plugin)

" vim-snippets
" SirVer/ultisnips
"let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips'
"let g:UltiSnipsExpandTrigger="ii"
"let g:UltiSnipsJumpForwardTrigger="<C-b>"
"let g:UltiSnipsJumpBackwardTrigger="<C-z>"

"*****************************************************
"           YouCompleteMe配置                        *
"*****************************************************
"leader映射为逗号“，”
let mapleader = ","  
"默认的ycm_extra_conf.py
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_confirm_extra_conf=0
" 使用ctags生成的tags文件
let g:ycm_collect_identifiers_from_tag_files = 1
nnoremap <leader>mm:YcmCompleter GoToDeclaration<CR>
nnoremap <leader>ml:YcmCompleter GoToDefinition<CR>
nnoremap <leader>gd:YcmCompleter GoToDefinitionElseDeclaration<CR>

"*****************************************************
"                   taglist配置                      *
"*****************************************************
"不显示"press F1 to display help"
let Tlist_Compact_Format=1
"窗口在左侧显示
let Tlist_Use_Right_Window=1
"只显示当前文件的tags
let Tlist_Show_One_File=1
"高亮显示
let Tlist_Auto_Highlight_tag=1
"随文件自动更新
let Tlist_Auto_Update=1
"设置宽度
let Tlist_WinWidth=30
"taglist窗口是最后一个窗口，则退出vim
let Tlist_Exit_OnlyWindow=1
"单击跳转
let Tlist_Use_SingClick=1
" 自动打开taglist
"let Tlist_Auto_Open=1
"打开关闭快捷键
nnoremap <silent> <F3> :TlistToggle<CR>


call vundle#end()

" sql style
let g:sql_type_default = 'mysql'

""获取当前路径的上一级的路径
function! GET_UP_PATH(dir)
    let pos=len(a:dir)-1
    while pos>0
        if (a:dir[pos]=="/" )
            return  strpart(a:dir,0,pos)
        endif
        let pos=pos-1
    endwhile
    return  ""
endfunction

"设置相关tags
function! s:SET_TAGS()
    let dir = expand("%:p:h") "获得源文件路径
        "在路径上递归向上查找tags文件 
        while dir!=""
            if findfile("tags",dir) !=""
                "找到了就加入到tags
                 exec "set tags+=" . dir . "/tags"
             endif
            "得到上级路径
            let dir=GET_UP_PATH(dir)
        endwhile
    endfunction

autocmd BufEnter * call s:SET_TAGS()
set tags=tags;
set tags+=~/.vim/systags
set tags+=~/.vim/pythontags
" gen systags: 
" ctags -R --fields=+aiKSz --extra=+q --c++-kinds=+px .

set notagbsearch

set backspace=indent,eol,start
set tabstop=4
set shiftwidth=4
set expandtab
set cindent

" 代码折叠
set fdm=marker
"set fdm=syntax

" 在编辑过程中，在右下角显示光标位置的状态行
set ruler

set showcmd
set hlsearch
set incsearch
set cino=g0:0          " let class's public: don't indent

" F12 run python
map <F12> :!/usr/bin/python %
map <F9> :!~/go/bin/go run %

"map <c-w><c-t> :Tlist<cr>
"map <c-w><c-m> :WMToggle<cr>
"map <c-w><c-f> :FirstExplorerWindow<cr>
"map <c-w><c-b> :BottomExplorerWindow<cr>
":set cscopequickfix=s-,c-,d-,i-,t-,e-
":cs add /home/broom/yeast/trunk/cscope.out /home/broom/yeast/trunk/
"let g:winManagerWindowLayout='FileExplorer|TagList'
":nmap wm :WMToggle<cr>
"nnoremap <silent> <F3> :Grep<CR>


nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" 语法高亮度显示
let python_highlight_all=1
syntax on


filetype plugin indent on
set viminfo='20,\"50

" 设置历史的行数
set history=1000

" Only do this part when compiled with support for autocommands
if has("autocmd")
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif
endif
" set bg=dark

" 显示行号
set nu

filetype plugin on


"------------------------------------------------------------------------------
function! SET_PYTHON_IDENT()
	set shiftwidth=2
	set softtabstop=2
	set tabstop=2
	set backspace=2
	set smarttab
  set cursorcolumn
endfunction

au FileType python,ruby,go :call SET_PYTHON_IDENT()
au FileType python set omnifunc=pythoncomplete#Complete

" Encoding related
set encoding=UTF-8
" set langmenu=zh_CN.UTF-8
" language message zh_CN.UTF-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileencoding=utf-8

set t_Co=256
"set background=dark
"colorscheme charged-256
"colorscheme desert256
"colorscheme desert
"colorscheme darkburn
"colorscheme monokai
colorscheme molokai

au GUIEnter * call libcallnr("vimtweak.dll", "SetAlpha", 234)
